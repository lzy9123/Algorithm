import edu.princeton.cs.algs4.StdOut;
import edu.princeton.cs.algs4.StdIn;
import java.lang.IllegalArgumentException;
import java.util.NoSuchElementException;
import java.lang.UnsupportedOperationException;
import java.util.Iterator;
import edu.princeton.cs.algs4.StdRandom;
//uniform(int n)
/*
Throw a java.lang.IllegalArgumentException if the client calls enqueue() with a null argument.
Throw a java.util.NoSuchElementException if the client calls either sample() or dequeue() when the randomized queue is empty.
Throw a java.util.NoSuchElementException if the client calls the next() method in the iterator when there are no more items to return.
Throw a java.lang.UnsupportedOperationException if the client calls the remove() method in the iterator.
*/

public class RandomizedQueue<Item> implements Iterable<Item> {
  private Node first;
  private int n;
  
  private class Node {
    private Item item;
    private Node next;
  }
  
  // construct an empty randomized queue
  public RandomizedQueue() {
    n=0;
  }
   // is the randomized queue empty?  
  public boolean isEmpty(){
    return (n==0);
  }
  
   // return the number of items on the randomized queue
  public int size() {
    return n;
  }
  
  // add the item
  public void enqueue(Item item){
    if(item==null) throw new IllegalArgumentException("Can't add null item.");
    if(first==null){first=new Node();first.item=item;}
    else{
      //Set up a new node
      Node NewFirst=new Node();
      NewFirst.item=item;
      //Conntected forward and backward;
      NewFirst.next=first;
      //Change the postion of first, always first node;
      first=NewFirst;
    }
    n++;
  }
  
   // remove and return a random item
  public Item dequeue(){
    if(isEmpty()) throw new NoSuchElementException("Already Empty");
    int index=StdRandom.uniform(n);
    Node cursor=first;
    Item item;
    if (index==0) {
      item=first.item;
      first=first.next;
      n--;
      return item;
    }
    else{
      //move to the previous to the deleted node.
      for(int i=0;i<index-1;i++){
        cursor=cursor.next;
      }
      //Linked the previous to next of the deleted node 
      item=cursor.next.item;
      cursor.next=cursor.next.next;
      n--;
      return item;
    }
  }
  
   // return a random item (but do not remove it)
  public Item sample(){
    if(isEmpty()) throw new NoSuchElementException("Already Empty");
    int index=StdRandom.uniform(n);
    Node cursor=first;
    //move to the previous to the required node.
    for(int i=0;i<index;i++){
      cursor=cursor.next;
    }
    return cursor.item;
  }
   
   // return an independent iterator over items in random order
  public Iterator<Item> iterator() {
    return new RandomizedQueueIterator();
  }
 
 
 private RandomizedQueue<Item> SelfCopy () {
    Node current = first;
    RandomizedQueue<Item> CopyQueue  = new RandomizedQueue<Item>();
    if(current==null) throw new java.util.NoSuchElementException ("NullPointer");
    while (current.next!=null){
        CopyQueue.enqueue(current.item);
        current=current.next;
    }
    return CopyQueue;
  }
  
  private class RandomizedQueueIterator implements Iterator<Item> {
    private RandomizedQueue<Item> CopyQueue=SelfCopy ();
    public boolean hasNext() {return !CopyQueue.isEmpty();}
    public Item next(){
      if(!hasNext()) throw new NoSuchElementException("Already Empty");
      if(hasNext()){
      Item item = CopyQueue.dequeue();
      return item;
      }
      return null;
    }
    public void remove(){throw new UnsupportedOperationException("Can't remove iterator.");}
  }
   
   // unit testing (optional)
  public static void main(String[] args){
    RandomizedQueue<String> randomizeQueue = new RandomizedQueue<String>();
     while (!StdIn.isEmpty()) {
            String item = StdIn.readString();
            randomizeQueue.enqueue(item);
        }
     
     //StdOut.println("Random items are" + randomizeQueue.sample() + ", "+randomizeQueue.sample());
     Iterator<String> iterator = randomizeQueue.iterator();
     //iterator.remove();
     while(iterator.hasNext()) {
       StdOut.println("Iterator:\n"+iterator.next());
     }
     /*
     while (!randomizeQueue.isEmpty()) {
            String item =randomizeQueue.dequeue();
            StdOut.println(item);
            StdOut.println("(" + randomizeQueue.size() + " left on deque)");
        }
        */
  }
}